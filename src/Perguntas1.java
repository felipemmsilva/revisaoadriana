import java.util.*;

public class Perguntas1 {
    static int vidajogador = 10;
    static int vidabugador = 24;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Introdu√ß√£o (mantida exatamente como voc√™ escreveu)
        System.out.println("Ol√°, jogador! Seja bem-vindo ao universo digital de Code City..1.");
        // (Aqui pode manter toda a introdu√ß√£o que voc√™ j√° escreveu...)

        System.out.println("Chegou a hora de botar em pr√°tica tudo que aprendeu e come√ßar a derrotar o Bugador Mal√≠gno");

        // Criar perguntas
        List<Pergunta> perguntas = new ArrayList<>();

        perguntas.add(new Pergunta(
                "Desafio 1 ‚Äì A Porta da Decis√£o:\nint idade = 18;\nif (idade >= 18) {\n    System.out.println(\"Voc√™ pode votar.\");\n} else {\n    System.out.println(\"Voc√™ ainda n√£o pode votar.\");\n}",
                new String[]{"Voc√™ pode votar.", "Voc√™ ainda n√£o pode votar.", "Erro de compila√ß√£o"},
                1));
        perguntas.add(new Pergunta(
                "Desafio 2 ‚Äì O Caminho Par ou √çmpar:\nint numero = 5;\nif (numero % 2 == 0) {\n    System.out.println(\"Par\");\n} else {\n    System.out.println(\"√çmpar\");\n}",
                new String[]{"Par", "√çmpar", "Erro de sintaxe"},
                2));
        perguntas.add(new Pergunta(
                "Desafio 3 ‚Äì O Erro no C√≥digo:\nint x = 10;\nif x > 5 {\n    System.out.println(\"Maior que 5\");\n}",
                new String[]{"Falta ponto e v√≠rgula", "Faltam par√™nteses no if", "O valor de x n√£o √© comparado corretamente"},
                2));
        perguntas.add(new Pergunta(
                "Desafio 4 ‚Äì O S√≠mbolo Misterioso:\nO que significa '==' em um if?",
                new String[]{"Atribui√ß√£o de valor", "Compara√ß√£o de igualdade", "Compara√ß√£o de refer√™ncia"},
                2));
        perguntas.add(new Pergunta(
                "Desafio 5 ‚Äì A Nota Suprema:\nint nota = 10;\nif (nota == 10) { ... }\n\nPara qual valor a sa√≠da ser√° 'Nota excelente'?",
                new String[]{"10", "9", "Maior que 10"},
                1));
        // Adicione at√© as 12 perguntas conforme voc√™ criou...

        // Embaralhar e escolher 3
        Collections.shuffle(perguntas);
        List<Pergunta> selecionadas = perguntas.subList(0, 3);

        // Perguntas interativas
        for (Pergunta p : selecionadas) {
            System.out.println("\n" + p.enunciado);
            for (int i = 0; i < p.opcoes.length; i++) {
                System.out.println((i + 1) + ". " + p.opcoes[i]);
            }

            System.out.print("Sua resposta (1-" + p.opcoes.length + "): ");
            int resposta = scanner.nextInt();

            if (resposta == p.respostaCorreta) {
                vidabugador--;
                System.out.println("‚úÖ Correto! Voc√™ tirou 1 vida do Bugador Mal√≠gno!");
            } else {
                vidajogador--;
                System.out.println("‚ùå Errado! Voc√™ perdeu 1 vida.");
                System.out.println("Resposta correta: " + p.opcoes[p.respostaCorreta - 1]);
            }

            System.out.println("Sua vida: " + vidajogador + " | Vida do Bugador: " + vidabugador);

            if (vidajogador == 0) {
                System.out.println("‚ò†Ô∏è Voc√™ foi derrotado pelo Bugador Mal√≠gno!");
                return;
            }

            if (vidabugador == 0) {
                System.out.println("üéâ Voc√™ derrotou o Bugador Mal√≠gno e salvou Code City!");
                return;
            }
        }

        System.out.println("\nFim desta rodada. Prepare-se para os pr√≥ximos desafios!");

        // Cap√≠tulo 2 - Estruturas de Repeti√ß√£o
        System.out.println("\nüìò Cap√≠tulo 2 ‚Äì La√ßos de Repeti√ß√£o:");
        System.out.println("Neste cap√≠tulo, voc√™ aprender√° a controlar o fluxo do tempo em Code City com estruturas de repeti√ß√£o. Essas estruturas permitem que um trecho de c√≥digo seja executado v√°rias vezes, sendo essenciais para tarefas automatizadas.");

// Explica√ß√µes
        System.out.println("\nüîÑ 1. O la√ßo for √© ideal quando sabemos quantas vezes algo deve se repetir.");
        System.out.println("Exemplo: for (int i = 1; i <= 5; i++) { System.out.println(i); }");

        System.out.println("\nüîÅ 2. while √© usado quando N√ÉO sabemos quantas vezes o c√≥digo precisa se repetir.");
        System.out.println("Exemplo: while (temMoedas) { inserirMoeda(); }");

        System.out.println("\nüîÇ 3. do-while sempre executa ao menos uma vez, pois a verifica√ß√£o da condi√ß√£o ocorre no final.");
        System.out.println("Exemplo: do { jogar(); } while (jogadorDeseja);");

        System.out.println("\nüõë 4. break interrompe o loop imediatamente.");
        System.out.println("Exemplo: if (senhaCerta) { break; }");

        System.out.println("\n‚è≠Ô∏è 5. continue pula a itera√ß√£o atual e volta para a pr√≥xima repeti√ß√£o.");
        System.out.println("Exemplo: if (x < 0) { continue; }");

        System.out.println("\nüî¢ 6. Um loop pode imprimir sequ√™ncias, como 'Turno 1' at√© 'Turno 3'.");
        System.out.println("Exemplo: for (int i = 1; i <= 3; i++) { System.out.println(\"Turno \" + i); }");

        System.out.println("\n‚úñÔ∏è 7. Podemos calcular o fatorial de um n√∫mero com um loop.");
        System.out.println("Exemplo: fatorial de 4 ‚Üí 1 √ó 2 √ó 3 √ó 4 = 24");

        System.out.println("\n‚è¨ 8. La√ßos tamb√©m permitem contagem regressiva.");
        System.out.println("Exemplo: for (int i = 5; i > 0; i--)");

        System.out.println("\nüß© 9. Podemos ter loops dentro de loops, chamados aninhados, √∫teis para matrizes.");

        System.out.println("\n‚öôÔ∏è 10. Vari√°veis booleanas podem controlar a execu√ß√£o de loops com true/false.");

        System.out.println("\nüìö 11. La√ßos for s√£o ideais para gerar tabuadas.");

        System.out.println("\nüö´ 12. Um while termina quando a condi√ß√£o se torna falsa.");

// In√≠cio do combate do cap√≠tulo 2
        System.out.println("\nüß† Chegou a hora de testar seu conhecimento sobre la√ßos e continuar sua batalha contra o Bugador Mal√≠gno!");

    }


    // Classe auxiliar para perguntas
    static class Pergunta {
        String enunciado;
        String[] opcoes;
        int respostaCorreta;

        Pergunta(String enunciado, String[] opcoes, int respostaCorreta) {
            this.enunciado = enunciado;
            this.opcoes = opcoes;
            this.respostaCorreta = respostaCorreta;
        }
    }

}

class Capitulo2 {
    static int vidajogador = 10;
    static int vidabugador = 24;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Cap√≠tulo 2 - O Labirinto da Repeti√ß√£o");
        System.out.println("Ap√≥s vencer o primeiro desafio, voc√™ entra no Labirinto da Repeti√ß√£o, onde o Bugador Mal√≠gno distorce os la√ßos de repeti√ß√£o e confunde os novatos em programa√ß√£o.");
        System.out.println("\nPrepare-se! Antes de enfrentar as pr√≥ximas perguntas, revise os conceitos essenciais:");

        System.out.println("\nüìò Resumo dos Conceitos:");
        System.out.println("1. for √© ideal quando sabemos quantas vezes repetir.");
        System.out.println("2. while para repeti√ß√µes indefinidas.");
        System.out.println("3. do-while sempre executa pelo menos uma vez.");
        System.out.println("4. break encerra o loop.");
        System.out.println("5. continue pula para a pr√≥xima repeti√ß√£o.");
        System.out.println("6. La√ßo com i de 1 a 3 imprime: Turno 1, 2, 3.");
        System.out.println("7. Fatorial de 4: 1√ó2√ó3√ó4 = 24.");
        System.out.println("8. Contagem regressiva usa i--.");
        System.out.println("9. Loop aninhado √© um dentro de outro.");
        System.out.println("10. Booleano pode controlar o loop.");
        System.out.println("11. for √© √≥timo para tabuada.");
        System.out.println("12. while para quando a condi√ß√£o ainda for verdadeira.");

        // Criar perguntas
        List<Pergunta> perguntas = new ArrayList<>();

        perguntas.add(new Pergunta("1. Qual la√ßo usamos quando sabemos o n√∫mero de repeti√ß√µes?",
                new String[]{"while", "do-while", "for"}, 3));

        perguntas.add(new Pergunta("2. Quando usamos while?",
                new String[]{"Para repetir quando n√£o sabemos quantas vezes", "Para contar at√© 10", "Apenas para somar n√∫meros"}, 1));

        perguntas.add(new Pergunta("3. Qual a principal diferen√ßa do do-while?",
                new String[]{"Nunca executa", "Executa ao menos uma vez", "N√£o tem condi√ß√£o"}, 2));

        perguntas.add(new Pergunta("4. O que faz o comando break dentro de um loop?",
                new String[]{"Pula para a pr√≥xima repeti√ß√£o", "Termina o loop", "Multiplica valores"}, 2));

        perguntas.add(new Pergunta("5. Qual a fun√ß√£o do continue?",
                new String[]{"Sai do loop", "Reinicia a vari√°vel", "Pula para a pr√≥xima repeti√ß√£o"}, 3));

        perguntas.add(new Pergunta("6. O que esse c√≥digo imprime?\nfor (int i = 1; i <= 3; i++) {\n    System.out.println(\"Turno \" + i);\n}",
                new String[]{"Turno 1 at√© Turno 3", "Turno 0", "Nada"}, 1));

        perguntas.add(new Pergunta("7. Como calcular fatorial de 4?",
                new String[]{"1 + 2 + 3 + 4", "1 √ó 2 √ó 3 √ó 4", "4 √∑ 2 √∑ 1"}, 2));

        perguntas.add(new Pergunta("8. Qual loop usamos para contar de tr√°s para frente?",
                new String[]{"for (int i = 5; i > 0; i--)", "for (int i = 0; i < 5; i++)", "while (true)"}, 1));

        perguntas.add(new Pergunta("9. O que √© um loop aninhado?",
                new String[]{"Um loop com if", "Um loop dentro de outro", "Um loop que n√£o termina"}, 2));

        perguntas.add(new Pergunta("10. Para que serve um booleano em loop?",
                new String[]{"Para formatar sa√≠da", "Para interromper o loop com l√≥gica", "Para contar vari√°veis"}, 2));

        perguntas.add(new Pergunta("11. Qual estrutura usamos para gerar uma tabuada?",
                new String[]{"while", "if", "for"}, 3));

        perguntas.add(new Pergunta("12. Quando um loop while para de executar?",
                new String[]{"Quando a condi√ß√£o se torna falsa", "Quando ele imprime", "Quando somamos"}, 1));

        // Embaralhar e escolher 3
        Collections.shuffle(perguntas);
        List<Pergunta> selecionadas = perguntas.subList(0, 3);

        // Perguntas interativas
        for (Pergunta p : selecionadas) {
            System.out.println("\n" + p.enunciado);
            for (int i = 0; i < p.opcoes.length; i++) {
                System.out.println((i + 1) + ". " + p.opcoes[i]);
            }

            System.out.print("Sua resposta (1-" + p.opcoes.length + "): ");
            int resposta = scanner.nextInt();

            if (resposta == p.respostaCorreta) {
                vidabugador--;
                System.out.println("‚úÖ Correto! Voc√™ tirou 1 vida do Bugador Mal√≠gno!");
            } else {
                vidajogador--;
                System.out.println("‚ùå Errado! Voc√™ perdeu 1 vida.");
                System.out.println("Resposta correta: " + p.opcoes[p.respostaCorreta - 1]);
            }

            System.out.println("Sua vida: " + vidajogador + " | Vida do Bugador: " + vidabugador);

            if (vidajogador == 0) {
                System.out.println("‚ò†Ô∏è Voc√™ foi derrotado pelo Bugador Mal√≠gno!");
                return;
            }

            if (vidabugador == 0) {
                System.out.println("üéâ Voc√™ derrotou o Bugador Mal√≠gno e salvou Code City mais uma vez!");
                return;
            }
        }

        System.out.println("\nFim do Cap√≠tulo 2. Prepare-se para desafios ainda maiores nos pr√≥ximos cap√≠tulos!");
    }

    // Classe auxiliar para perguntas
    static class Pergunta {
        String enunciado;
        String[] opcoes;
        int respostaCorreta;

        Pergunta(String enunciado, String[] opcoes, int respostaCorreta) {
            this.enunciado = enunciado;
            this.opcoes = opcoes;
            this.respostaCorreta = respostaCorreta;
        }
    }
}

class Capitulo3 {
    static int vidajogador = 10;
    static int vidabugador = 24;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("üåü CAP√çTULO 3: MESTRE DOS M√âTODOS üåü");
        System.out.println("\nVoc√™ chegou ao Laborat√≥rio dos C√≥digos Encapsulados.");
        System.out.println("Aqui, os m√©todos s√£o os poderes m√°gicos dos programadores, moldando o fluxo da l√≥gica com efici√™ncia.");
        System.out.println("Aprenda a usar os m√©todos, entender seus retornos e controlar o fluxo do programa com precis√£o.");
        System.out.println("------------------------------------------------------------");

        System.out.println("üìò DICAS R√ÅPIDAS:");
        System.out.println("1. void para m√©todos sem retorno.");
        System.out.println("2. Par√¢metros enviam dados ao m√©todo.");
        System.out.println("3. return envia valor de volta.");
        System.out.println("4. Retorna se n√∫mero √© par: return n % 2 == 0;");
        System.out.println("5. M√©todo que retorna int usa 'int'.");
        System.out.println("6. Overloading = mesmo nome, diferentes par√¢metros.");
        System.out.println("7. M√©todos podem se chamar entre si.");
        System.out.println("8. Dobrar(4) = 8.");
        System.out.println("9. Conta de 1 at√© n com loop.");
        System.out.println("10. Concatena√ß√£o √© a jun√ß√£o de textos: +.");
        System.out.println("11. Booleanos controlam l√≥gica interna.");
        System.out.println("12. senha.length() >= 6 verifica o tamanho.");

        System.out.println("\nPrepare-se para os desafios do cap√≠tulo 3!");

        List<Pergunta> perguntas = new ArrayList<>();

        perguntas.add(new Pergunta(
                "1. Qual palavra usamos para declarar um m√©todo que n√£o retorna nada?",
                new String[]{"int", "void", "return"},
                2));
        perguntas.add(new Pergunta(
                "2. Como passamos dados para um m√©todo?",
                new String[]{"Comentando", "Chamando a fun√ß√£o", "Usando par√¢metros"},
                3));
        perguntas.add(new Pergunta(
                "3. O que faz o comando return?",
                new String[]{"Chama outro m√©todo", "Interrompe o programa", "Envia um valor de volta"},
                3));
        perguntas.add(new Pergunta(
                "4. O que esse m√©todo retorna?\n\npublic static boolean ehPar(int n) {\n    return n % 2 == 0;\n}",
                new String[]{"Se √© m√∫ltiplo de 10", "Se √© par", "Se √© √≠mpar"},
                2));
        perguntas.add(new Pergunta(
                "5. Como chamamos um m√©todo que retorna int?",
                new String[]{"public void soma()", "public int soma()", "public double soma()"},
                2));
        perguntas.add(new Pergunta(
                "6. O que √© overloading de m√©todo?",
                new String[]{"Ter v√°rios m√©todos com o mesmo nome e par√¢metros diferentes", "Erro de sobrecarga", "Fun√ß√µes dentro de outras"},
                1));
        perguntas.add(new Pergunta(
                "7. Podemos chamar um m√©todo dentro de outro?",
                new String[]{"Sim", "N√£o", "Apenas se for void"},
                1));
        perguntas.add(new Pergunta(
                "8. Qual √© o resultado de dobrar(4) se o m√©todo for return n * 2?",
                new String[]{"8", "6", "2"},
                1));
        perguntas.add(new Pergunta(
                "9. O que esse m√©todo faz?\n\npublic static void contar(int n) {\n    for (int i = 1; i <= n; i++) {\n        System.out.println(i);\n    }\n}",
                new String[]{"Imprime de 1 at√© n", "Soma todos os valores", "Cria um vetor"},
                1));
        perguntas.add(new Pergunta(
                "10. Como se chama a jun√ß√£o de textos em Java?",
                new String[]{"merge()", "concatena√ß√£o", "stringar()"},
                2));
        perguntas.add(new Pergunta(
                "11. Para que serve o par√¢metro booleano em um m√©todo?",
                new String[]{"Para formatar texto", "Para controle de l√≥gica", "Para multiplicar"},
                2));
        perguntas.add(new Pergunta(
                "12. Qual m√©todo √© v√°lido para checar se uma senha tem 6 ou mais caracteres?",
                new String[]{"senha.length() > 6", "senha.equals(6)", "senha.length() >= 6"},
                3));

        Collections.shuffle(perguntas);
        List<Pergunta> selecionadas = perguntas.subList(0, 3); // Sorteia 3

        for (Pergunta p : selecionadas) {
            System.out.println("\n" + p.enunciado);
            for (int i = 0; i < p.opcoes.length; i++) {
                System.out.println((i + 1) + ". " + p.opcoes[i]);
            }

            System.out.print("Sua resposta (1-" + p.opcoes.length + "): ");
            int resposta = scanner.nextInt();

            if (resposta == p.respostaCorreta) {
                vidabugador--;
                System.out.println("‚úÖ Correto! Voc√™ tirou 1 vida do Bugador Mal√≠gno!");
            } else {
                vidajogador--;
                System.out.println("‚ùå Errado! Voc√™ perdeu 1 vida.");
                System.out.println("Resposta correta: " + p.opcoes[p.respostaCorreta - 1]);
            }

            System.out.println("Sua vida: " + vidajogador + " | Vida do Bugador: " + vidabugador);

            if (vidajogador == 0) {
                System.out.println("‚ò†Ô∏è Voc√™ foi derrotado pelo Bugador Mal√≠gno!");
                return;
            }

            if (vidabugador == 0) {
                System.out.println("üéâ Voc√™ derrotou o Bugador Mal√≠gno e salvou Code City!");
                return;
            }
        }

        System.out.println("\nFim desta rodada. Prepare-se para os pr√≥ximos desafios!");
    }

    static class Pergunta {
        String enunciado;
        String[] opcoes;
        int respostaCorreta;

        Pergunta(String enunciado, String[] opcoes, int respostaCorreta) {
            this.enunciado = enunciado;
            this.opcoes = opcoes;
            this.respostaCorreta = respostaCorreta;
        }
    }
}

class Perguntas4 {
    static int vidajogador = 10;
    static int vidabugador = 24;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Introdu√ß√£o do Cap√≠tulo 4
        System.out.println("Cap√≠tulo 4: Polimorfismo e Heran√ßa");
        System.out.println("Nesta etapa voc√™ vai aprender sobre polimorfismo, heran√ßa, interfaces e muito mais.");
        System.out.println("Vamos entender como um mesmo m√©todo pode agir de formas diferentes e como as classes podem se relacionar.\n");

        System.out.println("Preparado para desafiar o Bugador Mal√≠gno com o poder da Orienta√ß√£o a Objetos? Vamos l√°!");

        // Criar perguntas
        List<Pergunta> perguntas = new ArrayList<>();

        perguntas.add(new Pergunta(
                "1. O que √© polimorfismo?",
                new String[]{
                        "A) M√∫ltiplas formas de um m√©todo se comportar",
                        "B) Multiplica√ß√£o de n√∫meros",
                        "C) Vari√°veis privadas"},
                1));
        perguntas.add(new Pergunta(
                "2. O que √© heran√ßa?",
                new String[]{
                        "A) Compartilhamento de atributos entre objetos",
                        "B) Classe herdando outra",
                        "C) Vari√°vel local"},
                2));
        perguntas.add(new Pergunta(
                "3. Como usamos polimorfismo em Java?",
                new String[]{
                        "A) Criando m√©todos an√¥nimos",
                        "B) Declarando um objeto com tipo pai e inst√¢ncia de tipo filho",
                        "C) Usando arrays apenas"},
                2));
        perguntas.add(new Pergunta(
                "4. Qual o papel do super?",
                new String[]{
                        "A) Chamar o construtor da subclasse",
                        "B) Chamar m√©todo da superclasse",
                        "C) Ignorar heran√ßa"},
                2));
        perguntas.add(new Pergunta(
                "5. O que @Override indica?",
                new String[]{
                        "A) Que o m√©todo ser√° ocultado",
                        "B) Que est√° criando um novo m√©todo",
                        "C) Que o m√©todo est√° sendo sobrescrito"},
                3));
        perguntas.add(new Pergunta(
                "6. Como impedir que um m√©todo seja sobrescrito?",
                new String[]{
                        "A) final",
                        "B) static",
                        "C) void"},
                1));
        perguntas.add(new Pergunta(
                "7. O que este c√≥digo faz?\nForma f = new Circulo();\nf.desenhar();",
                new String[]{
                        "A) Chama desenhar() da classe Forma",
                        "B) Chama desenhar() de Circulo",
                        "C) D√° erro de compila√ß√£o"},
                2));
        perguntas.add(new Pergunta(
                "8. Qual o uso do instanceof?",
                new String[]{
                        "A) Criar uma nova classe",
                        "B) Verificar o tipo real de um objeto",
                        "C) Substituir atributos"},
                2));
        perguntas.add(new Pergunta(
                "9. Quando usar interface?",
                new String[]{
                        "A) Quando quiser definir contratos de comportamento",
                        "B) Para herdar atributos",
                        "C) Para calcular somas"},
                1));
        perguntas.add(new Pergunta(
                "10. O que este c√≥digo faz?\nSystem.out.println(new Livro());",
                new String[]{
                        "A) Imprime endere√ßo de mem√≥ria",
                        "B) Imprime \"Livro Java\" se toString() estiver sobrescrito",
                        "C) D√° erro"},
                2));
        perguntas.add(new Pergunta(
                "11. Qual vantagem do polimorfismo?",
                new String[]{
                        "A) C√≥digo repetitivo",
                        "B) Acoplamento forte",
                        "C) Flexibilidade de comportamento"},
                3));
        perguntas.add(new Pergunta(
                "12. Como criar um m√©todo gen√©rico para v√°rias classes?",
                new String[]{
                        "A) Usar casting",
                        "B) Usar m√©todos est√°ticos",
                        "C) Usar polimorfismo com heran√ßa ou interface"},
                3));

        // Embaralhar perguntas
        Collections.shuffle(perguntas);

        // Selecionar 3 perguntas para o desafio (pode ajustar conforme quiser)
        List<Pergunta> selecionadas = perguntas.subList(0, 3);

        // Perguntas interativas
        for (Pergunta p : selecionadas) {
            System.out.println("\n" + p.enunciado);
            for (int i = 0; i < p.opcoes.length; i++) {
                System.out.println(p.opcoes[i]);
            }

            System.out.print("Sua resposta (A, B ou C): ");
            String respostaUsuario = scanner.next().toUpperCase();

            int respostaInt = respostaUsuario.charAt(0) - 'A' + 1;

            if (respostaInt == p.respostaCorreta) {
                vidabugador--;
                System.out.println("‚úÖ Correto! Voc√™ tirou 1 vida do Bugador Mal√≠gno!");
            } else {
                vidajogador--;
                System.out.println("‚ùå Errado! Voc√™ perdeu 1 vida.");
                System.out.println("Resposta correta: " + p.opcoes[p.respostaCorreta - 1]);
            }

            System.out.println("Sua vida: " + vidajogador + " | Vida do Bugador: " + vidabugador);

            if (vidajogador == 0) {
                System.out.println("‚ò†Ô∏è Voc√™ foi derrotado pelo Bugador Mal√≠gno!");
                return;
            }

            if (vidabugador == 0) {
                System.out.println("üéâ Voc√™ derrotou o Bugador Mal√≠gno e salvou Code City!");
                return;
            }
        }

        System.out.println("\nFim desta rodada. Prepare-se para os pr√≥ximos desafios!");
    }

    // Classe auxiliar para perguntas
    static class Pergunta {
        String enunciado;
        String[] opcoes;
        int respostaCorreta;

        Pergunta(String enunciado, String[] opcoes, int respostaCorreta) {
            this.enunciado = enunciado;
            this.opcoes = opcoes;
            this.respostaCorreta = respostaCorreta;
        }
    }
}